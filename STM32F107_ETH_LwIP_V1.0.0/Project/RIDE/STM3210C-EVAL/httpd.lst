
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Project\RIDE\STM3210C-EVAL\httpd.o:     file format elf32-littlearm
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Project\RIDE\STM3210C-EVAL\httpd.o

Disassembly of section .text.fs_open:

00000000 <fs_open>:
fs_open():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:346
  tcp_accept(pcb, http_accept);
}
/*-----------------------------------------------------------------------------------*/
int
fs_open(char *name, struct fs_file *file)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4606      	mov	r6, r0
   4:	460d      	mov	r5, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:349
  struct fsdata_file_noconst *f;

  for (f = (struct fsdata_file_noconst *)FS_ROOT; f != NULL; f = (struct fsdata_file_noconst *)f->next)
   6:	4c09      	ldr	r4, [pc, #36]	(2c <fs_open+0x2c>)
   8:	e00b      	b.n	22 <fs_open+0x22>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:351
  {
    if (!strcmp(name, f->name))
   a:	4630      	mov	r0, r6
   c:	6861      	ldr	r1, [r4, #4]
   e:	f7ff fffe 	bl	0 <strcmp>
  12:	b928      	cbnz	r0, 20 <fs_open+0x20>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:353
    {
      file->data = f->data;
  14:	68a3      	ldr	r3, [r4, #8]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:354
      file->len = f->len;
  16:	3001      	adds	r0, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:353

  for (f = (struct fsdata_file_noconst *)FS_ROOT; f != NULL; f = (struct fsdata_file_noconst *)f->next)
  {
    if (!strcmp(name, f->name))
    {
      file->data = f->data;
  18:	602b      	str	r3, [r5, #0]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:354
      file->len = f->len;
  1a:	68e3      	ldr	r3, [r4, #12]
  1c:	606b      	str	r3, [r5, #4]
  1e:	e003      	b.n	28 <fs_open+0x28>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:349
int
fs_open(char *name, struct fs_file *file)
{
  struct fsdata_file_noconst *f;

  for (f = (struct fsdata_file_noconst *)FS_ROOT; f != NULL; f = (struct fsdata_file_noconst *)f->next)
  20:	6824      	ldr	r4, [r4, #0]
  22:	2c00      	cmp	r4, #0
  24:	d1f1      	bne.n	a <fs_open+0xa>
  26:	4620      	mov	r0, r4
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:359
      file->len = f->len;
      return 1;
    }
  }
  return 0;
}
  28:	bd70      	pop	{r4, r5, r6, pc}
  2a:	46c0      	nop			(mov r8, r8)
  2c:	00000000 	.word	0x00000000
Disassembly of section .text.httpd_init:

00000000 <httpd_init>:
httpd_init():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:335
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
void
httpd_init(void)
{
   0:	b510      	push	{r4, lr}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:338
  struct tcp_pcb *pcb;

  pcb = tcp_new();
   2:	f7ff fffe 	bl	0 <tcp_new>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:339
  tcp_bind(pcb, IP_ADDR_ANY, 80);
   6:	2250      	movs	r2, #80
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:338
void
httpd_init(void)
{
  struct tcp_pcb *pcb;

  pcb = tcp_new();
   8:	4604      	mov	r4, r0
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:339
  tcp_bind(pcb, IP_ADDR_ANY, 80);
   a:	4905      	ldr	r1, [pc, #20]	(20 <httpd_init+0x20>)
   c:	f7ff fffe 	bl	0 <tcp_bind>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:340
  pcb = tcp_listen(pcb);
  10:	21ff      	movs	r1, #255
  12:	4620      	mov	r0, r4
  14:	f7ff fffe 	bl	0 <tcp_listen_with_backlog>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:341
  tcp_accept(pcb, http_accept);
  18:	4902      	ldr	r1, [pc, #8]	(c <tcp_accept+0xc>)
  1a:	f7ff fffe 	bl	0 <tcp_accept>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:342
}
  1e:	bd10      	pop	{r4, pc}
	...
Disassembly of section .text.http_accept:

00000000 <http_accept>:
http_accept():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:303
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
   0:	b570      	push	{r4, r5, r6, lr}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:308
  struct http_state *hs;

  /* Allocate memory for the structure that holds the state of the
     connection. */
  hs = mem_malloc(sizeof(struct http_state));
   2:	2008      	movs	r0, #8
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:303
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
   4:	460d      	mov	r5, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:308
  struct http_state *hs;

  /* Allocate memory for the structure that holds the state of the
     connection. */
  hs = mem_malloc(sizeof(struct http_state));
   6:	f7ff fffe 	bl	0 <mem_malloc>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:310

  if (hs == NULL)
   a:	4601      	mov	r1, r0
   c:	b908      	cbnz	r0, 12 <http_accept+0x12>
   e:	24ff      	movs	r4, #255
  10:	e012      	b.n	38 <http_accept+0x38>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:316
  {
    return ERR_MEM;
  }

  /* Initialize the structure. */
  hs->file = NULL;
  12:	2400      	movs	r4, #0
  14:	6004      	str	r4, [r0, #0]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:317
  hs->left = 0;
  16:	6044      	str	r4, [r0, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:321

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
  18:	4628      	mov	r0, r5
  1a:	f7ff fffe 	bl	0 <tcp_arg>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:325

  /* Tell TCP that we wish to be informed of incoming data by a call
     to the http_recv() function. */
  tcp_recv(pcb, http_recv);
  1e:	4628      	mov	r0, r5
  20:	4906      	ldr	r1, [pc, #24]	(3c <http_accept+0x3c>)
  22:	f7ff fffe 	bl	0 <tcp_recv>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:327

  tcp_err(pcb, conn_err);
  26:	4628      	mov	r0, r5
  28:	4905      	ldr	r1, [pc, #20]	(40 <http_accept+0x40>)
  2a:	f7ff fffe 	bl	0 <tcp_err>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:329

  tcp_poll(pcb, http_poll, 10);
  2e:	4628      	mov	r0, r5
  30:	4904      	ldr	r1, [pc, #16]	(44 <http_accept+0x44>)
  32:	220a      	movs	r2, #10
  34:	f7ff fffe 	bl	0 <tcp_poll>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:331
  return ERR_OK;
}
  38:	b260      	sxtb	r0, r4
  3a:	bd70      	pop	{r4, r5, r6, pc}
	...
Disassembly of section .text.send_data:

00000000 <send_data>:
send_data():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:83
  err_t err;
  u16_t len;

  /* We cannot send more data than space avaliable in the send
     buffer. */
  if (tcp_sndbuf(pcb) < hs->left)
   0:	684b      	ldr	r3, [r1, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:77
  tcp_close(pcb);
}
/*-----------------------------------------------------------------------------------*/
static void
send_data(struct tcp_pcb *pcb, struct http_state *hs)
{
   2:	b570      	push	{r4, r5, r6, lr}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:83
  err_t err;
  u16_t len;

  /* We cannot send more data than space avaliable in the send
     buffer. */
  if (tcp_sndbuf(pcb) < hs->left)
   4:	f8b0 506e 	ldrh.w	r5, [r0, #110]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:77
  tcp_close(pcb);
}
/*-----------------------------------------------------------------------------------*/
static void
send_data(struct tcp_pcb *pcb, struct http_state *hs)
{
   8:	460c      	mov	r4, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:83
  err_t err;
  u16_t len;

  /* We cannot send more data than space avaliable in the send
     buffer. */
  if (tcp_sndbuf(pcb) < hs->left)
   a:	429d      	cmp	r5, r3
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:89
  {
    len = tcp_sndbuf(pcb);
  }
  else
  {
    len = hs->left;
   c:	bf28      	it	cs
   e:	b29d      	uxthcs	r5, r3
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:92
  }

  err = tcp_write(pcb, hs->file, len, 0);
  10:	6809      	ldr	r1, [r1, #0]
  12:	2300      	movs	r3, #0
  14:	462a      	mov	r2, r5
  16:	f7ff fffe 	bl	0 <tcp_write>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:94

  if (err == ERR_OK)
  1a:	f010 0fff 	tst.w	r0, #255	; 0xff
  1e:	d105      	bne.n	2c <tcp_write+0x2c>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:96
  {
    hs->file += len;
  20:	6823      	ldr	r3, [r4, #0]
  22:	195b      	adds	r3, r3, r5
  24:	6023      	str	r3, [r4, #0]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:97
    hs->left -= len;
  26:	6863      	ldr	r3, [r4, #4]
  28:	1b5b      	subs	r3, r3, r5
  2a:	6063      	str	r3, [r4, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:99
  }
}
  2c:	bd70      	pop	{r4, r5, r6, pc}
  2e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.http_poll:

00000000 <http_poll>:
http_poll():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:104

/*-----------------------------------------------------------------------------------*/
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
   0:	b510      	push	{r4, lr}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:105
  if (arg == NULL)
   2:	4603      	mov	r3, r0
   4:	b918      	cbnz	r0, e <http_poll+0xe>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:108
  {
    /*    printf("Null, close\n");*/
    tcp_close(pcb);
   6:	4608      	mov	r0, r1
   8:	f7ff fffe 	bl	0 <tcp_close>
   c:	e003      	b.n	16 <http_poll+0x16>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:112
  }
  else
  {
    send_data(pcb, (struct http_state *)arg);
   e:	4608      	mov	r0, r1
  10:	4619      	mov	r1, r3
  12:	f7ff fffe 	bl	0 <http_poll>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:116
  }

  return ERR_OK;
}
  16:	2000      	movs	r0, #0
  18:	bd10      	pop	{r4, pc}
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.conn_err:

00000000 <conn_err>:
conn_err():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:57


/*-----------------------------------------------------------------------------------*/
static void
conn_err(void *arg, err_t err)
{
   0:	b510      	push	{r4, lr}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:61
  struct http_state *hs;

  hs = arg;
  mem_free(hs);
   2:	f7ff fffe 	bl	0 <mem_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:62
}
   6:	bd10      	pop	{r4, pc}
Disassembly of section .text.close_conn:

00000000 <close_conn>:
close_conn():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:66
/*-----------------------------------------------------------------------------------*/
static void
close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:68

  tcp_arg(pcb, NULL);
   6:	2100      	movs	r1, #0
   8:	f7ff fffe 	bl	0 <tcp_arg>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:69
  tcp_sent(pcb, NULL);
   c:	4620      	mov	r0, r4
   e:	2100      	movs	r1, #0
  10:	f7ff fffe 	bl	0 <tcp_sent>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:70
  tcp_recv(pcb, NULL);
  14:	4620      	mov	r0, r4
  16:	2100      	movs	r1, #0
  18:	f7ff fffe 	bl	0 <tcp_recv>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:71
  mem_free(hs);
  1c:	4628      	mov	r0, r5
  1e:	f7ff fffe 	bl	0 <mem_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:72
  tcp_close(pcb);
  22:	4620      	mov	r0, r4
  24:	f7ff fffe 	bl	0 <tcp_close>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:73
}
  28:	bd70      	pop	{r4, r5, r6, pc}
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.http_sent:

00000000 <http_sent>:
http_sent():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:120
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
   0:	4602      	mov	r2, r0
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:125
  struct http_state *hs;

  hs = arg;

  if (hs->left > 0)
   2:	6853      	ldr	r3, [r2, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:120
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
   4:	b510      	push	{r4, lr}
   6:	4608      	mov	r0, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:125
  struct http_state *hs;

  hs = arg;

  if (hs->left > 0)
   8:	b11b      	cbz	r3, 12 <http_sent+0x12>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:127
  {
    send_data(pcb, hs);
   a:	4611      	mov	r1, r2
   c:	f7ff fffe 	bl	0 <http_sent>
  10:	e002      	b.n	18 <http_sent+0x18>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:131
  }
  else
  {
    close_conn(pcb, hs);
  12:	4611      	mov	r1, r2
  14:	f7ff fffe 	bl	0 <http_sent>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:135
  }

  return ERR_OK;
}
  18:	2000      	movs	r0, #0
  1a:	bd10      	pop	{r4, pc}
Disassembly of section .text.http_recv:

00000000 <http_recv>:
http_recv():
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:139
/*-----------------------------------------------------------------------------------*/
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	4617      	mov	r7, r2
   6:	b08d      	sub	sp, #52
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:143
  int i, j;
  char *data;
  char fname[40];
  struct fs_file file = {0, 0};
   8:	4a6b      	ldr	r2, [pc, #428]	(1b8 <http_recv+0x1b8>)
   a:	ad0a      	add	r5, sp, #40
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:139
  return ERR_OK;
}
/*-----------------------------------------------------------------------------------*/
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
   c:	4680      	mov	r8, r0
   e:	4689      	mov	r9, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:143
  int i, j;
  char *data;
  char fname[40];
  struct fs_file file = {0, 0};
  10:	e892 0003 	ldmia.w	r2, {r0, r1}
  14:	e885 0003 	stmia.w	r5, {r0, r1}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:148
  struct http_state *hs;

  hs = arg;

  if (err == ERR_OK && p != NULL)
  18:	2b00      	cmp	r3, #0
  1a:	f040 80c3 	bne.w	1a4 <http_recv+0x1a4>
  1e:	2f00      	cmp	r7, #0
  20:	f000 80c4 	beq.w	1ac <http_recv+0x1ac>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:152
  {

    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
  24:	4648      	mov	r0, r9
  26:	8939      	ldrh	r1, [r7, #8]
  28:	f7ff fffe 	bl	0 <tcp_recved>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:154

    if (hs->file == NULL)
  2c:	f8d8 3000 	ldr.w	r3, [r8]
  30:	2b00      	cmp	r3, #0
  32:	f040 80b4 	bne.w	19e <http_recv+0x19e>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:156
    {
      data = p->payload;
  36:	687e      	ldr	r6, [r7, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:158
        
      if (strncmp(data, "GET /STM32F107ADC", 17) == 0)
  38:	4960      	ldr	r1, [pc, #384]	(1bc <http_recv+0x1bc>)
  3a:	4630      	mov	r0, r6
  3c:	2211      	movs	r2, #17
  3e:	f7ff fffe 	bl	0 <strncmp>
  42:	bb38      	cbnz	r0, 94 <http_recv+0x94>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:163
      {
        char Digit1=0, Digit2=0, Digit3=0; 
        int ADCVal = 0;        

        pbuf_free(p);
  44:	4638      	mov	r0, r7
  46:	f7ff fffe 	bl	0 <pbuf_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:165

        ADCVal = ADC_GetConversionValue(ADC1);
  4a:	485d      	ldr	r0, [pc, #372]	(178 <ADC_GetConversionValue+0x178>)
  4c:	f7ff fffe 	bl	0 <ADC_GetConversionValue>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:167
        ADCVal = ADCVal/8;
        Digit1= ADCVal/100;
  50:	2264      	movs	r2, #100
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:166
        int ADCVal = 0;        

        pbuf_free(p);

        ADCVal = ADC_GetConversionValue(ADC1);
        ADCVal = ADCVal/8;
  52:	10c0      	asrs	r0, r0, #3
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:167
        Digit1= ADCVal/100;
  54:	fb90 f2f2 	sdiv	r2, r0, r2
  58:	b2d2      	uxtb	r2, r2
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:168
        Digit2= (ADCVal-(Digit1*100))/10;
  5a:	b253      	sxtb	r3, r2
  5c:	f06f 0463 	mvn.w	r4, #99	; 0x63
  60:	435c      	muls	r4, r3
  62:	210a      	movs	r1, #10
  64:	1823      	adds	r3, r4, r0
  66:	fb93 f3f1 	sdiv	r3, r3, r1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:171
        Digit3= ADCVal-(Digit1*100)-(Digit2*10);
        /* Update the ADC value in STM32F107ADC.html */
        *((data_STM32F107ADC_html)+ 0xb47+92) = 0x30 + Digit1; /* ADC value 1st digit */
  6a:	4956      	ldr	r1, [pc, #344]	(1c4 <http_recv+0x1c4>)
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:168
        pbuf_free(p);

        ADCVal = ADC_GetConversionValue(ADC1);
        ADCVal = ADCVal/8;
        Digit1= ADCVal/100;
        Digit2= (ADCVal-(Digit1*100))/10;
  6c:	b2db      	uxtb	r3, r3
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:171
        Digit3= ADCVal-(Digit1*100)-(Digit2*10);
        /* Update the ADC value in STM32F107ADC.html */
        *((data_STM32F107ADC_html)+ 0xb47+92) = 0x30 + Digit1; /* ADC value 1st digit */
  6e:	3230      	adds	r2, #48
  70:	f881 2ba3 	strb.w	r2, [r1, #2979]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:173
        *((data_STM32F107ADC_html)+ 0xb48+92) = 0x30 + Digit2; /* ADC value 2nd digit */ 
        *((data_STM32F107ADC_html)+ 0xb49+92) = 0x30 + Digit3; /* ADC value 3rd digit*/
  74:	3030      	adds	r0, #48
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:172
        Digit1= ADCVal/100;
        Digit2= (ADCVal-(Digit1*100))/10;
        Digit3= ADCVal-(Digit1*100)-(Digit2*10);
        /* Update the ADC value in STM32F107ADC.html */
        *((data_STM32F107ADC_html)+ 0xb47+92) = 0x30 + Digit1; /* ADC value 1st digit */
        *((data_STM32F107ADC_html)+ 0xb48+92) = 0x30 + Digit2; /* ADC value 2nd digit */ 
  76:	f103 0230 	add.w	r2, r3, #48	; 0x30
  7a:	f881 2ba4 	strb.w	r2, [r1, #2980]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:173
        *((data_STM32F107ADC_html)+ 0xb49+92) = 0x30 + Digit3; /* ADC value 3rd digit*/
  7e:	1900      	adds	r0, r0, r4
  80:	b25b      	sxtb	r3, r3
  82:	f06f 0209 	mvn.w	r2, #9	; 0x9
  86:	fb02 0303 	mla	r3, r2, r3, r0
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:176

    
        fs_open("/STM32F107ADC.html", &file);
  8a:	484f      	ldr	r0, [pc, #316]	(1c8 <http_recv+0x1c8>)
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:173
        Digit2= (ADCVal-(Digit1*100))/10;
        Digit3= ADCVal-(Digit1*100)-(Digit2*10);
        /* Update the ADC value in STM32F107ADC.html */
        *((data_STM32F107ADC_html)+ 0xb47+92) = 0x30 + Digit1; /* ADC value 1st digit */
        *((data_STM32F107ADC_html)+ 0xb48+92) = 0x30 + Digit2; /* ADC value 2nd digit */ 
        *((data_STM32F107ADC_html)+ 0xb49+92) = 0x30 + Digit3; /* ADC value 3rd digit*/
  8c:	f881 3ba5 	strb.w	r3, [r1, #2981]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:176

    
        fs_open("/STM32F107ADC.html", &file);
  90:	4629      	mov	r1, r5
  92:	e073      	b.n	17c <http_recv+0x17c>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:187

        /* Tell TCP that we wish be to informed of data that has been
           successfully sent by a call to the http_sent() function. */
        tcp_sent(pcb, http_sent);
      }
      else if (strncmp(data, "GET /method=get", 15) == 0)
  94:	4630      	mov	r0, r6
  96:	494d      	ldr	r1, [pc, #308]	(1cc <http_recv+0x1cc>)
  98:	220f      	movs	r2, #15
  9a:	f7ff fffe 	bl	0 <strncmp>
  9e:	2800      	cmp	r0, #0
  a0:	d141      	bne.n	126 <http_recv+0x126>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:190
      {
        i = 15;
        STM_EVAL_LEDOff(LED1);
  a2:	f7ff fffe 	bl	0 <STM_EVAL_LEDOff>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:191
        STM_EVAL_LEDOff(LED2);
  a6:	2001      	movs	r0, #1
  a8:	f7ff fffe 	bl	0 <STM_EVAL_LEDOff>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:192
        STM_EVAL_LEDOff(LED3);
  ac:	2002      	movs	r0, #2
  ae:	f7ff fffe 	bl	0 <STM_EVAL_LEDOff>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:193
        STM_EVAL_LEDOff(LED4);
  b2:	2003      	movs	r0, #3
  b4:	f7ff fffe 	bl	0 <STM_EVAL_LEDOff>
  b8:	240f      	movs	r4, #15
  ba:	e029      	b.n	110 <http_recv+0x110>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:198

        while(data[i]!=0x20/* */)
        {
          i++; 
          if (data[i] == 0x6C /* l */)
  bc:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:197
        STM_EVAL_LEDOff(LED3);
        STM_EVAL_LEDOff(LED4);

        while(data[i]!=0x20/* */)
        {
          i++; 
  c0:	3401      	adds	r4, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:198
          if (data[i] == 0x6C /* l */)
  c2:	2b6c      	cmp	r3, #108
  c4:	d125      	bne.n	112 <http_recv+0x112>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:200
          {
            i++;
  c6:	3401      	adds	r4, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:201
            if (data[i] ==  0x65 /* e */)
  c8:	5733      	ldrsb	r3, [r6, r4]
  ca:	2b65      	cmp	r3, #101
  cc:	d120      	bne.n	110 <http_recv+0x110>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:203
            {
              i++;
  ce:	3401      	adds	r4, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:204
              if (data[i] ==  0x64 /* d*/)
  d0:	5733      	ldrsb	r3, [r6, r4]
  d2:	2b64      	cmp	r3, #100
  d4:	d11c      	bne.n	110 <http_recv+0x110>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:206
              {
                i+=2; 
  d6:	3402      	adds	r4, #2
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:207
                if(data[i]==0x31 /* 1 */)
  d8:	5733      	ldrsb	r3, [r6, r4]
  da:	1935      	adds	r5, r6, r4
  dc:	2b31      	cmp	r3, #49
  de:	d102      	bne.n	e6 <http_recv+0xe6>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:209
                {
                  STM_EVAL_LEDOn(LED1);   
  e0:	2000      	movs	r0, #0
  e2:	f7ff fffe 	bl	0 <STM_EVAL_LEDOn>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:212
                }
  
                if(data[i]==0x32 /* 2 */)
  e6:	f995 3000 	ldrsb.w	r3, [r5]
  ea:	2b32      	cmp	r3, #50
  ec:	d102      	bne.n	f4 <http_recv+0xf4>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:214
                {
                  STM_EVAL_LEDOn(LED2);   
  ee:	2001      	movs	r0, #1
  f0:	f7ff fffe 	bl	0 <STM_EVAL_LEDOn>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:217
                }
        
                if(data[i]==0x33 /* 3 */)
  f4:	f995 3000 	ldrsb.w	r3, [r5]
  f8:	2b33      	cmp	r3, #51
  fa:	d102      	bne.n	102 <http_recv+0x102>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:219
                {
                  STM_EVAL_LEDOn(LED3);   
  fc:	2002      	movs	r0, #2
  fe:	f7ff fffe 	bl	0 <STM_EVAL_LEDOn>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:222
                }
            
                if(data[i]==0x34 /* 4 */)
 102:	f995 3000 	ldrsb.w	r3, [r5]
 106:	2b34      	cmp	r3, #52
 108:	d102      	bne.n	110 <http_recv+0x110>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:224
                {
                  STM_EVAL_LEDOn(LED4);  
 10a:	2003      	movs	r0, #3
 10c:	f7ff fffe 	bl	0 <STM_EVAL_LEDOn>
 110:	1932      	adds	r2, r6, r4
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:195
        STM_EVAL_LEDOff(LED1);
        STM_EVAL_LEDOff(LED2);
        STM_EVAL_LEDOff(LED3);
        STM_EVAL_LEDOff(LED4);

        while(data[i]!=0x20/* */)
 112:	f992 3000 	ldrsb.w	r3, [r2]
 116:	2b20      	cmp	r3, #32
 118:	d1d0      	bne.n	bc <http_recv+0xbc>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:231
              }   
            }
          } 
        }

        pbuf_free(p);
 11a:	4638      	mov	r0, r7
 11c:	f7ff fffe 	bl	0 <pbuf_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:233

        fs_open("/STM32F107LED.html", &file);
 120:	482b      	ldr	r0, [pc, #172]	(1d0 <http_recv+0x1d0>)
 122:	a90a      	add	r1, sp, #40
 124:	e02a      	b.n	17c <http_recv+0x17c>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:244

        /* Tell TCP that we wish be to informed of data that has been
           successfully sent by a call to the http_sent() function. */
        tcp_sent(pcb, http_sent);
      }    
      else if (strncmp(data, "GET ", 4) == 0)
 126:	4630      	mov	r0, r6
 128:	492a      	ldr	r1, [pc, #168]	(1d4 <http_recv+0x1d4>)
 12a:	2204      	movs	r2, #4
 12c:	f7ff fffe 	bl	0 <strncmp>
 130:	2800      	cmp	r0, #0
 132:	d13b      	bne.n	1ac <http_recv+0x1ac>
 134:	4632      	mov	r2, r6
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:248
      {
        for (i = 0; i < 40; i++)
        {
          if (((char *)data + 4)[i] == ' ' ||
 136:	f992 3004 	ldrsb.w	r3, [r2, #4]
 13a:	2b20      	cmp	r3, #32
 13c:	d003      	beq.n	146 <http_recv+0x146>
 13e:	2b0d      	cmp	r3, #13
 140:	d001      	beq.n	146 <http_recv+0x146>
 142:	2b0a      	cmp	r3, #10
 144:	d101      	bne.n	14a <http_recv+0x14a>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:252
              ((char *)data + 4)[i] == '\r' ||
              ((char *)data + 4)[i] == '\n')
          {
            ((char *)data + 4)[i] = 0;
 146:	2300      	movs	r3, #0
 148:	7113      	strb	r3, [r2, #4]
 14a:	3201      	adds	r2, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:246
           successfully sent by a call to the http_sent() function. */
        tcp_sent(pcb, http_sent);
      }    
      else if (strncmp(data, "GET ", 4) == 0)
      {
        for (i = 0; i < 40; i++)
 14c:	f106 0328 	add.w	r3, r6, #40	; 0x28
 150:	429a      	cmp	r2, r3
 152:	d1f0      	bne.n	136 <http_recv+0x136>
 154:	2100      	movs	r1, #0
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:261
        i = 0;
        j = 0;
        
        do
        {
          fname[i] = ((char *)data + 4)[j];
 156:	1873      	adds	r3, r6, r1
 158:	791a      	ldrb	r2, [r3, #4]
 15a:	f80d 2001 	strb.w	r2, [sp, r1]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:264
          j++;
          i++;
        } while (fname[i - 1] != 0 && i < 40);
 15e:	b112      	cbz	r2, 166 <http_recv+0x166>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:263
        
        do
        {
          fname[i] = ((char *)data + 4)[j];
          j++;
          i++;
 160:	3101      	adds	r1, #1
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:264
        } while (fname[i - 1] != 0 && i < 40);
 162:	2928      	cmp	r1, #40
 164:	d1f7      	bne.n	156 <http_recv+0x156>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:266
        
        pbuf_free(p);
 166:	4638      	mov	r0, r7
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:268

        if (!fs_open(fname, &file))
 168:	ac0a      	add	r4, sp, #40
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:266
          fname[i] = ((char *)data + 4)[j];
          j++;
          i++;
        } while (fname[i - 1] != 0 && i < 40);
        
        pbuf_free(p);
 16a:	f7ff fffe 	bl	0 <pbuf_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:268

        if (!fs_open(fname, &file))
 16e:	4668      	mov	r0, sp
 170:	4621      	mov	r1, r4
 172:	f7ff fffe 	bl	0 <http_recv>
 176:	b918      	cbnz	r0, 180 <http_recv+0x180>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:270
        {
          fs_open("/STM32F107.html", &file);
 178:	4817      	ldr	r0, [pc, #92]	(1d8 <http_recv+0x1d8>)
 17a:	4621      	mov	r1, r4
 17c:	f7ff fffe 	bl	0 <http_recv>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:272
        }
        hs->file = file.data;
 180:	9b0a      	ldr	r3, [sp, #40]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:275
        hs->left = file.len;

        send_data(pcb, hs);
 182:	4648      	mov	r0, r9
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:272

        if (!fs_open(fname, &file))
        {
          fs_open("/STM32F107.html", &file);
        }
        hs->file = file.data;
 184:	f8c8 3000 	str.w	r3, [r8]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:273
        hs->left = file.len;
 188:	9b0b      	ldr	r3, [sp, #44]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:275

        send_data(pcb, hs);
 18a:	4641      	mov	r1, r8
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:273
        if (!fs_open(fname, &file))
        {
          fs_open("/STM32F107.html", &file);
        }
        hs->file = file.data;
        hs->left = file.len;
 18c:	f8c8 3004 	str.w	r3, [r8, #4]
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:275

        send_data(pcb, hs);
 190:	f7ff fffe 	bl	0 <http_recv>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:279

        /* Tell TCP that we wish be to informed of data that has been
           successfully sent by a call to the http_sent() function. */
        tcp_sent(pcb, http_sent);
 194:	4648      	mov	r0, r9
 196:	4911      	ldr	r1, [pc, #68]	(1dc <http_recv+0x1dc>)
 198:	f7ff fffe 	bl	0 <tcp_sent>
 19c:	e002      	b.n	1a4 <http_recv+0x1a4>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:288
        close_conn(pcb, hs);
      }
    }
    else
    {
      pbuf_free(p);
 19e:	4638      	mov	r0, r7
 1a0:	f7ff fffe 	bl	0 <pbuf_free>
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:299

    close_conn(pcb, hs);
  }
  
  return ERR_OK;
}
 1a4:	2000      	movs	r0, #0
 1a6:	b00d      	add	sp, #52
 1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
D:\SAV\STM32_Documents\lwip_st_STM32\STM32F107_ETH_LwIP_V1.0.0\Utilities\lwip-1.3.1\port/httpd.c:295
  }

  if (err == ERR_OK && p == NULL)
  {

    close_conn(pcb, hs);
 1ac:	4648      	mov	r0, r9
 1ae:	4641      	mov	r1, r8
 1b0:	f7ff fffe 	bl	0 <http_recv>
 1b4:	e7f6      	b.n	1a4 <http_recv+0x1a4>
 1b6:	46c0      	nop			(mov r8, r8)
 1b8:	00000010 	.word	0x00000010
 1bc:	00000000 	.word	0x00000000
 1c0:	40012400 	.word	0x40012400
 1c4:	00000000 	.word	0x00000000
 1c8:	00000012 	.word	0x00000012
 1cc:	00000025 	.word	0x00000025
 1d0:	00000035 	.word	0x00000035
 1d4:	00000048 	.word	0x00000048
 1d8:	0000004d 	.word	0x0000004d
 1dc:	00000000 	.word	0x00000000
